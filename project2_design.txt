                            Project 2: Priority-based Schedule 

1. Problem
Implement priority based schedule. The thread with higher priority is going to run 
first (preemption allowed). When threads have similar priority, then a round-robin
method is used to choose the next running thread (Each thread has a fixed number of 
time slice).


2. Data Structures
None


3. Algorithm
3.1 Preemption 
First we must understand in what kind of situations that thread re-schedule or preemption 
is needed. The following situations: 
1) timer interrupt handler. When the time slice of a thread is used up, 
we need a schedule a new thread here. Note that the interrupe handler calls 
thread_preemption() (which calls intr_yield_on_return) to schedule a new process.

2) Thread changes its priority (increase or decrease). Thread can call 
thread_set_priority to changes its priority. When a thread lowers its priority, 
a new thread with higher priority in ready_list (if exists) should be scheduled to run.
So thread_yield() is called in this case.

3) Creat a new thread. When the new creatd thread has a higher priority than the running
thread, we need switch to the new thread now. This case calls thread_yield().

4) Threads wake up (waiting for a lock before). When a lock is currently held by another thread, the running thread will be put into the wait list of the lock and call thread_block(), thread_blocksets thread's status to blocked, and schedule.

5) Threads yield cpu or exit.

In order to achieve priority based schedule, the thread with highest priority should be 
selected to run on each schedule. So it is natural that we use an ordered list, that is 
ready_list, which is in order of priority, form lower to higher. thread_unblock() and 
thread_yield() are doing this stuff.
On each schedule, list_pop_back() is called to pop the thread with highest priority out.

3.2 Priority Donation
Think about the following case. Thread H (high priority) waits on a lock that thread L 
(low priority) already held. Obviously, both H and L can't get cpu time. That is what we 
called priortiy inversion, as the thread with the highest priority can not be executed. 
A genaral solution to this problem is to use priority donation. That is, H will 'donate' 
its priority to L, so L cat get the highest priority and be executed first. Then H cat 
get the lock that L released and catch cpu on the next schedule.

There are two kinds of donations that need to be considered:
1) Multiple donations.

2) Nested donation.

4. Synchronization
Detail why synchronization is needed or not needed and how synchronization is 
implemented.


5. Rationale
Critique your design
